#!/usr/intel/pkgs/perl/5.14.1/bin/perl
#
# Maintained by Hinckley, Troy -- troy.j.hinckley@intel.com
#
########################################################################
# csh-source
#   source a csh script and convert actions for use in a better shell
########################################################################

use File::Basename;
use strict;
use warnings;
use Const::Fast;
use English qw(-no_match_vars);    # avoid regex penalties
use List::MoreUtils qw(any uniq);
use IPC::Open3;
use feature qw(say);
use Term::ANSIColor qw(:constants);

#*****************************************************************************
# File Scope Variables
#*****************************************************************************

my $script_name  = basename($PROGRAM_NAME);    # The name of the script.
my @source_args  = ();
my %new_alias    = ();
my %new_func     = ();
my %new_env      = ();
my %changed_vars = ();
my %old_alias    = ();

my $first_run = 1; # only print output for first run

#*****************************************************************************
# Main
#*****************************************************************************

# Check the command line options
my %opt = get_options();

# extract the enviroment variables
if ($opt{env}) {
    extract_script_changes('env', \&extract_env);
    process_env_vars();
}

# extract the aliases
if ($opt{alias}) {
    extract_script_changes('alias', \&extract_aliases);
    process_aliases() unless ($opt{diff});
}

# show diff
if ($opt{diff}) {
    show_diff(\%changed_vars);
    exit 0;
}

if (not $opt{inline}) {
    start_new_shell();    #method will never return
}

exit 0;

######################################################
## Subroutines
#####################################################

# Source the provided command in csh and extract env vars and aliases
sub extract_script_changes {
    my $display_cmd     = shift;
    my $extract_func    = shift;
    my $config_location = "/tmp/$ENV{USER}.env_config.$PID";
    my $source_args     = $opt{source_args};
    my $env_shell       = $opt{env_shell};

    # Note: modpath is a nasty 'script' encountered in many EC scripts, so hack in a definition
    my $modpath_alias = "alias modpath \"set modpath=(\\!*); source \$EC_ENV_ROOT/bin/modpath; unset modpath\"\n";

    my ($cmd_in, $cmd_out, $cmd_err);
    use Symbol 'gensym'; $cmd_err = gensym;

    # create and execute the shell command
    my $env_cmd = "$env_shell -f -c '$modpath_alias && source $source_args && $display_cmd > $config_location'";
    my $child_pid = open3($cmd_in, $cmd_out, $cmd_err, $env_cmd);

    waitpid($child_pid, 0);

    if ($first_run) {
        if (not $opt{diff}) {
            my $fh = ($opt{inline}) ? *STDERR : *STDOUT;
            while (<$cmd_out>) {
                unless (/$opt{ignore_msg}/) {
                    print {$fh} $_;
                }
            }
        }

        print {*STDERR} <$cmd_err>; # forward errors
        $first_run = 0;
    }

    const my $EXIT_CODE_OFFSET => 8;
    my $env_exit_code = ($CHILD_ERROR >> $EXIT_CODE_OFFSET);
    if ($env_exit_code) {
        die "-E- source '$opt{source_args}' failed with exit code $env_exit_code .\n";
    }
    open my $env_lines, '<', "$config_location"
      or die "Could not open $config_location for reading. $OS_ERROR \n";

    while (my $env_line = <$env_lines>) {
        chomp $env_line;
        $extract_func->($env_line);
    }
    close $env_lines;
    return;
}

# break env line into hash
sub extract_env {
    my $env_line = shift;
    my ($var, $val) = split(/=/, $env_line, 2);
    $new_env{$var} = $val;
    return;
}

# break alias line into hash
sub extract_aliases {
    my $alias_line = shift;
    my ($alias, $val) = split(/\s+/, $alias_line, 2);
    return if ($alias eq 'modpath');
    if ($alias and defined $val) {
        my $setenv    = sub {($opt{shell_type} eq 'fish') ? "set -x $1" : "export $1="};
        my $unset     = ($opt{shell_type} eq 'fish') ? 'set -e'    : 'unset';
        my $eval_char = ($opt{shell_type} eq 'fish') ? ''          : '$';
        $old_alias{$alias} = $val;
        $val =~ s/setenv\s+(\w+)/&$setenv/eg;
        $val =~ s/unsetenv/$unset/g;
        $val =~ s/source\s+(.*?)\s*(;|$)/eval $eval_char(csh-source -inline -alias $1)$2/gm;    # source tcsh scripts
        # if alias contains paramters, translate to bash function

        if ($opt{shell_type} eq 'fish') {
            $val =~ s/![*]/\$argv/g;                  # !*   => $argv
            $val =~ s/!:(\d+)[*]/\$argv[$1..-1]/g;    # !:2* => $argv[2..-1]
            $val =~ s/!:(\d+)/\$argv[$1]/g;           # !:1  => $argv[1]
            $val =~ s/\s*[&]{2}/; and/g;              # &&   => and
            $val =~ s/\s*[|]{2}/; or/g;               # ||   => or
        }
        elsif (
            $val =~ s/![*]/\$\@/g            or    # !*   => $@
            $val =~ s/!:(\d+)[*]/\${\@:$1}/g or    # !:2* => ${@:2}
            $val =~ s/!:(\d+)/\$$1/g               # !:1  => $1
            )
        {
            $new_func{$alias} = $val;
            return;
        }
        $alias =~ s/^-/-- -/;                      # don't interpret `-` as a flag
        $val =~ s/'/'\\''/g unless $opt{diff};     # fix up quotes
        $new_alias{$alias} = $val;
    }
    return;
}

# Apply the new env-var settings
sub process_env_vars {
    my @all_env_vars = uniq(keys %ENV, keys %new_env);
    no warnings 'qw'; # Avoid perl's warning that I (intentionally) have a '#' in a qw() list
    my @ignore_vars = qw( * @ # ? - $ ! 0 _ PS1 SHLVL OLDPWD COMP_WORDBREAKS LC_ALL);
    for my $var (@all_env_vars) {
        # don't process "special" variables
        my $pattern = quotemeta $var;
        next if any { /$pattern/ } @ignore_vars;

        my $old_val = $ENV{$var};
        my $new_val = $new_env{$var};
        apply_env($var, $old_val, $new_val);
    }
    return;
}

sub apply_env {
    my ($var, $old_val, $new_val) = @_;

    my $diff   = $opt{diff};
    my $inline = $opt{inline};


    # Truth table for how to behave on env-var defined/undefined transitions
    #  O = env-var was defined in *old* environment
    #  N = env-var is defined in *new* environment
    #
    #  O N   ACTION                  REPORT
    #  0 0   n/a (not observable)    n/a
    #  0 1   Update %ENV             [undef] => val
    #  1 0   Delete from %ENV        val => [undef]
    #  1 1   Update %ENV             val => val (only if changed)
    if (not defined $old_val and defined $new_val) {
        if ($diff) {
            $changed_vars{$var} = [ '[undef]', $new_val, ];
        } elsif ($inline) {
            if ($opt{shell_type} eq 'fish') {
                print "set -x $var \"$new_val\";\n";
            } else {
                print "export $var=\"$new_val\";\n";
            }

        } else {
            $ENV{$var} = $new_val;
        }
    } elsif (defined $old_val and not defined $new_val) {
        if ($diff) {
            $changed_vars{$var} = [ $old_val, '[undef]', ];
        } elsif ($inline) {
            print "unset $var;\n";
        } else {
            delete $ENV{$var};
        }
    } elsif (defined $old_val and defined $new_val) {
        if ($diff) {
            $changed_vars{$var} = [ $old_val, $new_val ] if ($old_val ne $new_val);
        } elsif ($inline) {
            if ($old_val ne $new_val) {
                if ($opt{shell_type} eq 'fish') {
                    if ($var eq 'PATH') {
                        $new_val =~ s/:/ /g;
                        $new_val =~ s{/p/hdk/rtl/bin }{}; # this path doesn't exist but only fish cares
                        print "set -x $var $new_val;\n";
                    } else {
                        print "set -x $var \"$new_val\";\n";
                    }
                } else {
                    print "export $var=\"$new_val\";\n";
            }
        }
        } else {
            $ENV{$var} = $new_val;
        }
    } else {
        die "ERROR: Both previous and new values are UNDEFINED for $var.\n";
    }
    return;

}

# process needed aliases
sub process_aliases {
    foreach my $alias (keys %new_alias) {
        print "alias $alias='$new_alias{$alias}';\n" if ($opt{inline});
    }
    foreach my $func (keys %new_func) {
        print "$func() { $new_func{$func}; };\n" if ($opt{inline});
    }
    return;
}

# Show env-var diffs
sub show_diff {
    my $changed_vars = shift;
    if ($opt{env}) {
        print BLUE, "Env changes from 'source $opt{source_args}':\n", RESET;
        for my $var (sort keys %{$changed_vars}) {
            my ($old_val, $new_val) = @{ $changed_vars->{$var} };
            print BOLD, "$var: ", RESET;
            print "$old_val";
            print GREEN, ' => ', RESET;
            print "$new_val\n";
        }
    }
    if ($opt{alias}) {
        print BLUE, "Aliases translated from 'source $opt{source_args}':\n", RESET;
        for my $alias (keys %old_alias) {
            if (exists $new_alias{$alias}) {
                print BOLD, "$alias: ", RESET;
                print "'$old_alias{$alias}'";
                print GREEN, ' => ', RESET;
                print "'$new_alias{$alias}'\n";
            } elsif (exists $new_func{$alias}) {
                print BOLD, "$alias: ", RESET;
                print "'$old_alias{$alias}'";
                print GREEN, ' => ', RESET;
                print "func() { $new_func{$alias}; }\n";
            }
        }
    }
    return;
}

sub start_new_shell {

    # Setup new shell command
    my $shell_cmd;
    my $groups     = $opt{groups};
    my $shell      = $opt{shell};
    my $shell_args = $opt{shell_args};
    if ($groups) {
        my @groups = split /,/, $groups;
        my ($primary_group) = shift @groups;
        $shell_cmd = "wash -s $shell -g $primary_group";
        $shell_cmd .= " -n @groups"        if (@groups);
        $shell_cmd .= " -- -c $shell_args" if ($shell_args);
    } else {
        $shell_cmd = $shell;
        $shell_cmd .= " -c $shell_args" if ($shell_args);
    }

    # Start new shell
    print "Executing new shell: $shell_cmd\n" if ($opt{debug});
    exec($shell_cmd );

    # exec never returns
}

#*****************************************************************************
# getSource() gets unprocessed arguments from GetOptions, which should
#   be files to be sourced.  (Any arguments after -- are left in @ARGV for
#   $shellArgs.)
#*****************************************************************************
sub get_source {
    my (@source_files) = @_;
    push @source_args, @source_files;
    return;
}    # getSource

#*****************************************************************************
# get_options() retrieves the arguments and checks them for validity.
# Arguments:    none.
# Returns:      nothing if all is OK, otherwise we call usage(), which dies.
#*****************************************************************************
sub get_options {
    my @err_msg;    # Accumulate error messages here.

    use Getopt::Long qw(:config pass_through );
    my %options = (
        'env'        => 1,
        'debug'      => 0,
        'diff'       => 0,
        'ignore_msg' => q{.^}, # regex matches nothing by default
        'env_shell'  => '/bin/csh',
        'inline'     => 0,
        'shell'      => $ENV{SHELL},
        'shell_args' => q{},
    );

    # run GetOptionsions to process arguments
    GetOptions(
        '<>'              => \&get_source,
        'alias!'          => \$options{alias},
        'env!'            => \$options{env},
        'debug|d'         => \$options{debug},
        'diff'            => \$options{diff},
        'ignore_msg=s'    => \$options{ignore_msg},
        'in-line|inline!' => \$options{inline},
        'env_shell|e=s'   => \$options{env_shell},
        'groups|g=s'      => \$options{groups},
        'help|h|?'        => \$options{help},
        'shell|s=s'       => \$options{shell},
        'verbose+'        => \$options{verbose},
    ) or die "\n";

    usage(@err_msg) if ($options{help});

    if (scalar @source_args == 0) {
        push @err_msg, 'You must provide file(s) to source.';
    }

    $options{shell_args} = join q{ }, @ARGV;
    # $options{shell_args} =~ s/^\s*\-\-(\s+|$)//; # get rid of '--' which is passed through to @ARGV by pass_through
    $options{source_args} = join(q{ }, @source_args);

    if ($options{debug} and $options{verbose}) {
        print {*STDERR} "Source Args are $options{source_args}.\n";
        print {*STDERR} "Sub-shell Args are $opt{shell_args}.\n";
    }

    if (not defined $options{alias}) { # if not specified extract aliases during inline
        $options{alias} = ($options{inline} or $options{diff});
    }

    if ($options{alias} and not $options{inline} and not $options{diff}) {
        warn "Aliases are not supported in shell exec mode; use -inline and use eval to inherit aliases.\n";
        $options{alias} = 0;
    }
    $options{shell_type} = basename($options{shell});

    usage(@err_msg) if @err_msg;
    return %options;
}

#*****************************************************************************
# usage() prints the usage message and exit(1).
# Arguments:
#     1. An array of error messages.  For the first array element, a beep is
#        produced.  If an element is not an empty string, it is printed using
#        warn() prior to the usage message.  If the error message array is
#        empty, the usage message alone is printed.
# Returns:      nothing: we exit here.
#*****************************************************************************
sub usage {
    my @errors = @_;
    foreach (@errors) {    # For each error,
        warn "$_\n" if $_ ne q{};    # print if it's not an empty string.
    }

    print << "_USAGE_";
$script_name <options> [source file] [source args] <-- [shell cmds and args]>
Desc: Updates current shell or exec'd subshell with the settings from the specified (csh-based) source-file and args
Options:
   -alias                  Extract and provide aliases set by [source file].  Requires -inline. (To omit aliases with -inline, use -noalias.)
   -noenv                  Do not gather enviroment variables set by [source file].
   -d|-debug               Enable reporting of debug messages
   -diff                   Report env-var diffs that *would have been applied*; then exit (no new sub-shell)
   -ignore_msg             regex of output to not print. Useful when you have scripts like spf_setup_env that pointlessly echo everything
   -e|-env_shell <path>    Use this executable instead of /bin/csh to generate the env from source-file
   -g|-groups              Set primary group of new sub-shell to first group here; additional groups are comma seperated
   -h|-help                Show this usage message and then exit
   -inline|-in_line        Use -inline with "eval \$(csh-source <file/args>)" to update your \$SHELL in place with env vars and aliases
   -s|-shell <type>        Exec a new sub-shell of the specified type, instead of using \$SHELL

Usages:
 Invoke a subshell with environment variables set via [source file]:
   $script_name [source file]

 Show differences between enviroments and alias translations from [source file]:
   $script_name -diff [source file]

 Invoke a subshell washed to 'hdfccpu' (as default group), 'coeenv' and 'user' with environment variables set via [source file]:
   $script_name -g hdfccpu,coeenv,user [source file]

 Update the current shell with aliases and env variables from [source file] (note these are backticks):
   eval \$($script_name -inline [source file])

 Update the current shell with env variables but not aliases from [source file]:
   eval \$($script_name -inline -noalias [source file])

 Update the current shell with alias but not enviroment variables from [source file]:
   eval \$($script_name -inline -noenv [source file])

 Create a file that contains the equivelent of the 'sourced' file in bash syntax:
   $script_name -inline [source_file] > file.bash

 Get your tcsh aliases converted to bash:
   $script_name -inline -noenv ~/.aliases > ~/.aliases.bash

_USAGE_

    exit(scalar @errors);
}
