#!/usr/intel/bin/bash

unset PERL5LIB
unset PROMPT_COMMAND

export SHELL=/usr/intel/bin/bash
export LC_ALL=en_US.UTF-8 # use UTF-8 character encoding
export http_proxy="http://proxy-chain.intel.com:911"  # proxy for http
export https_proxy="https://proxy-chain.intel.com:912"  # proxy for https
export GCONFTOOL=gconftool-2 # required to configure the theme of Gnome
export VERILATOR_ROOT=~/personal/verilator-3.884 # used to build verilator models
export EDITOR=/usr/intel/bin/vim # editor for commit messages and command edits
export HISTCONTROL=ignoredups # ignore duplicates in history
export SC_HOSTNAME=sccj002253.sc.intel.com
export FC_HOSTNAME=fcab1221.fc.intel.com
export PDX_HOSTNAME=plxd3483.pdx.intel.com
export ZONE_HOSTNAME=sccj002883.sc.intel.com
export BASH_PROMPT_PWD_DIR_LENGTH=5

if [[ $EC_SITE == 'sc' ]]; then
    export DSHOST=$SC_HOSTNAME
    if [[ -x $DISPLAY ]]; then
        export DISPLAY=$HOSTNAME:1.0
    fi
elif [[ $EC_SITE == 'fc' ]]; then
    export DSHOST=$FC_HOSTNAME
else
    export DSHOST=$PDX_HOSTNAME
fi

#dont load interactive config if using a non-interactive shell
if [[ -z ${PS1+x} ]]; then
    return
fi

shopt -s extglob # use extended globs
shopt -s cmdhist # save multiline commands as one command
shopt -s autocd # change directories without cd command
shopt -s cdspell # fix cd spelling errors
shopt -s checkwinsize # updated LINES and COLUMNS
shopt -s dirspell # check directory names for errors
shopt -s globstar # use ** to glob recursivley
shopt -s histverify # let me edit history substution commands before I run them
shopt -s no_empty_cmd_completion # don't attempt completion on empty commands

stty erase '^?'

# custom functions and scripts. Some of these are stolen from bash-it
for f in ~/.bash/*.bash; do source $f; done

munge PATH ~/bin
munge PATH ~/local/bin
munge PATH /usr/intel/bin
munge MANPATH ~/.local/share/man

BASE16_SHELL=~/.config/base16-shell/

[[ -z ${INSIDE_EMACS+x} ]] &&
    [[ -n $PS1 ]] &&
    [[ -s $BASE16_SHELL/profile_helper.sh ]] &&
    eval "$("$BASE16_SHELL"/profile_helper.sh)"

if [[ -d ~/perl5 ]]; then
    eval "$(perl -I"$HOME"/perl5/lib/perl5 -Mlocal::lib)"
    munge -end PATH ~/perl5/bin
    munge MANPATH ~/perl5/man
fi


if [[ $INSIDE_EMACS ]]; then
    touch /tmp/$$.env
    save_env () {
        # only save the env if a nonexcluded enviroment variable has changed.
        # This keeps Emacs from reload this file after every prompt
        changes=($(sed -r '/^(PS1|PWD|OLDPWD|COLUNMS)/d' <(grep -Fxvf /tmp/$$.env <(env))))

        if [[ ${#changes[@]} != '0' ]]; then
            env > /tmp/$$.env
        fi
    }
    munge -cmd PROMPT_COMMAND save_env
    export PAGER=cat

    # these files are read by Emacs to provide completion.
    alias > /tmp/$$.alias
    compgen -A function > /tmp/$$.func
    echo "<set-pid $$>"
else
    #
    # GNU Readline options
    #
    bind "set colored-completion-prefix on" # color the common prefix of a completion
    bind "set mark-symlinked-directories on" # add a / to the end of completed symlinked directories
    bind "set page-completions off" # don't use a pager for completion suggestions
    bind "set show-all-if-unmodified on" # if there is no common prefix display completion suggestions
    bind "set skip-completed-text on" # don't complete text that is already there
    bind "set history-preserve-point on" # keep the same cursor postions when cycling through history items
    bind "set bell-style visible" # don't 'ding' when ringing the bell

    # shellcheck source=/nfs/site/home/tjhinckl/.fzf.bash
    if [[ -f ~/.fzf.bash ]]; then
        source ~/.fzf.bash
        complete -F _fzf_path_completion -o default -o bashdefault e # add fzf completion to emacs
        complete -F _fzf_path_completion -o default -o bashdefault less # add fzf completion to less
        complete -F _fzf_path_completion -o default -o bashdefault cd # this is a bug in fzf that needs to be fixed. See junegunn/fzf#872
        export FZF_TMUX=1 # use tmux pane for fzf popup
        export FZF_COMPLETION_TRIGGER='ff' # use ff as a trigger sequence
    fi

    if [ -t 1 ]
    then
        bind '"[A":history-search-backward'
        bind '"[B":history-search-forward'
    fi

    alias tmux="TERM=xterm-256color tmux"

    send_bell() {
        echo -en "\a" # sound the bell
    }
    munge -cmd PROMPT_COMMAND send_bell
fi

# Defined by my theme in bash-it
munge -cmd -end PROMPT_COMMAND prompt_command
munge -cmd PROMPT_COMMAND get_exit_code
